// aes.ts
// MIT-style, Node-only, TypeScript port of a manual AES implementation.
// - No Node 'crypto' usage (pure JS math).
// - Exposes AES block cipher, modes (ECB/CBC/CFB/OFB/CTR), PKCS#7, and hex/utf8 utils.
// - Simpler than T-table variants (uses classic SubBytes/ShiftRows/MixColumns).
// - API shape mirrors the original aes-js surface (enough to be a drop-in for most uses).

// ---------- Types & Helpers ----------

export type ByteLike = Uint8Array | number[] | ArrayLike<number> | Buffer;

function isInt(n: unknown): n is number {
  return typeof n === "number" && Number.isInteger(n);
}

function isByteArrayLike(a: any): a is ArrayLike<number> {
  if (!a || typeof a.length !== "number" || !Number.isInteger(a.length)) return false;
  for (let i = 0; i < a.length; i++) {
    const v = a[i];
    if (!isInt(v) || v < 0 || v > 255) return false;
  }
  return true;
}

function coerceArray(arg: ByteLike, copy = false): Uint8Array {
  if (arg instanceof Uint8Array) return copy ? new Uint8Array(arg) : arg;
  if (typeof Buffer !== "undefined" && Buffer.isBuffer(arg)) return new Uint8Array(copy ? Buffer.from(arg) : arg);
  if (Array.isArray(arg)) {
    if (!isByteArrayLike(arg)) throw new Error("Array contains invalid value");
    return new Uint8Array(arg);
  }
  if (isByteArrayLike(arg)) {
    return new Uint8Array(Array.prototype.slice.call(arg));
  }
  throw new Error("unsupported array-like object");
}

function createArray(length: number): Uint8Array {
  return new Uint8Array(length);
}

function copyArray(
  sourceArray: ArrayLike<number>,
  targetArray: Uint8Array,
  targetStart = 0,
  sourceStart = 0,
  sourceEnd?: number
) {
  const src =
    sourceStart != null || sourceEnd != null
      ? new Uint8Array(Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd))
      : new Uint8Array(sourceArray as any);
  targetArray.set(src, targetStart);
}

function checkBlock16(b: ArrayLike<number>, what: "plaintext" | "ciphertext") {
  if (b.length !== 16) throw new Error(`invalid ${what} size (must be 16 bytes)`);
}

// ---------- UTF-8 / HEX utils (Node-friendly) ----------

export const utils = {
  utf8: {
    toBytes(text: string): Uint8Array {
      if (typeof Buffer !== "undefined") return new Uint8Array(Buffer.from(text, "utf8"));
      // very old runtimes: fallback
      return new TextEncoder().encode(text);
    },
    fromBytes(bytes: ByteLike): string {
      const u8 = coerceArray(bytes);
      if (typeof Buffer !== "undefined") return Buffer.from(u8).toString("utf8");
      return new TextDecoder().decode(u8);
    },
  },
  hex: {
    toBytes(hex: string): Uint8Array {
      if (hex.length % 2 !== 0) throw new Error("hex string must have an even length");
      const out = createArray(hex.length / 2);
      for (let i = 0; i < out.length; i++) {
        const v = parseInt(hex.substr(i * 2, 2), 16);
        if (Number.isNaN(v)) throw new Error("invalid hex");
        out[i] = v;
      }
      return out;
    },
    fromBytes(bytes: ByteLike): string {
      const u8 = coerceArray(bytes);
      let s = "";
      for (let i = 0; i < u8.length; i++) s += u8[i]!.toString(16).padStart(2, "0");
      return s;
    },
  },
};

// ---------- PKCS#7 Padding ----------

function pkcs7pad(data: ByteLike): Uint8Array {
  const u8 = coerceArray(data, true);
  const pad = 16 - (u8.length % 16 || 16) % 16 || 16; // yields 16 when already aligned
  const out = createArray(u8.length + pad);
  copyArray(u8, out);
  out.fill(pad, u8.length);
  return out;
}

function pkcs7strip(data: ByteLike): Uint8Array {
  const u8 = coerceArray(data, true);
  if (u8.length < 16) throw new Error("PKCS#7 invalid length");
  const pad = u8[u8.length - 1]!;
  if (pad < 1 || pad > 16) throw new Error("PKCS#7 padding byte out of range");
  const cut = u8.length - pad;
  for (let i = 0; i < pad; i++) {
    if (u8[cut + i] !== pad) throw new Error("PKCS#7 invalid padding byte");
  }
  return u8.slice(0, cut);
}

export const padding = {
  pkcs7: { pad: pkcs7pad, strip: pkcs7strip },
};

// ---------- AES S-boxes & Rcon (manual, compact) ----------

// Forward S-box
const S: number[] = [
  0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
];

// Inverse S-box
const Si: number[] = [
  0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x
